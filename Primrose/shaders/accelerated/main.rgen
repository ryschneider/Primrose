#version 460 core
#extension GL_EXT_ray_tracing : require

#include "payload.glsl"
#include "../structs.glsl"

layout(location = 0) rayPayloadEXT Payload payload;

layout(binding = 0) uniform accelerationStructureEXT acc;
layout(binding = 1, rgba32f) uniform image2D image;

layout(binding = 2) uniform Block {
	MarchUniforms uniforms;
} uniformBlock;
#define u uniformBlock.uniforms

layout(binding = 3) uniform sampler2D texSampler;

layout(push_constant) uniform PushConstant {
	float time;
} push;

const float MAX_DIST = 1000;

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
	vec2 screenXY = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy) * 2 - 1;
	screenXY.y = -screenXY.y;

	const vec3 forward = u.camDir;
	const vec3 right = normalize(cross(u.camUp, forward));
	const vec3 up = cross(forward, right);

	vec3 focalPos = u.camPos - u.focalLength*forward;
	vec3 fragPos = u.camPos + (screenXY.x*right + screenXY.y*u.screenHeight*up) * u.invZoom;

	vec3 origin = fragPos;
	vec3 dir = normalize(fragPos - focalPos);

	payload.hits = 0;
	traceRayEXT(acc, gl_RayFlagsNoneEXT,
		0xFF, 0, 1, 0, // cull mask, SBT offset, SBT stride, miss index
		origin, 0, dir, MAX_DIST,
		0); // payload layout id

	vec3 color = hsv2rgb(vec3(mod(float(payload.hits)*0.1, 1.0), 1, 1));
	if (payload.hits == 0) color = payload.color;
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}
